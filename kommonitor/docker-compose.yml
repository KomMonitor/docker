version: '3'

networks:
  kommonitor:
    driver: bridge
services:
    keycloak:
      image: jboss/keycloak:latest
      container_name: keycloak
      volumes:
        - ../keycloak/realms/realm-export.json:/tmp/realm-export.json
      environment:
        DB_VENDOR: h2
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        KEYCLOAK_IMPORT: /tmp/realm-export.json
        KEYCLOAK_FRONTEND_URL: http://localhost:8080/auth
      expose:
        - 8080
      ports:
        - 8080:8080
      networks:
        - kommonitor

    # database container; must use PostGIS database
    # database is not required to run in docker - will be configured in Data Management component
    kommonitor-db:
      image: mdillon/postgis
      container_name: kommonitor-db
      ports:
        - 5432:5432
      environment:
        - POSTGRES_USER=${DB_USER}
        - POSTGRES_PASSWORD=${DB_PW}
        - POSTGRES_DB=${DB_NAME}
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks:
        - kommonitor

    # Data Management component encapsulating the database access and management as REST service
    kommonitor-data-management:
      image: kommonitor/data-management
      container_name: kommonitor-data-management
      depends_on:
        - kommonitor-db
        - keycloak
      ports:
        - 8085:8085
      networks:
        - kommonitor
      links:
        - kommonitor-db
      env_file:
        - ./env/data-management.env
      environment:
        - DATABASE_USER=${DB_USER}
        - DATABASE_PASSWORD=${DB_PW}
        - DATABASE_NAME=${DB_NAME}
        - SERVER_PORT=8085
        
    # Importer component for importing datasets via Data Management
    kommonitor-importer:
      image: kommonitor/importer:latest
      env_file:
        - ./env/importer.env
      ports:
      - 8087:8087
      environment:
       - SERVER_PORT=8087

    # simple REST service that stores and serves various config files for KomMonitor clients (i.e. web-client)   
    kommonitor-client-config:          
      image: 'kommonitor/client-config'
      container_name: kommonitor-client-config
      ports:
        - 8088:8088
      networks:
       - kommonitor 
      volumes:
       - ./config/:/code/configStorage
      environment:
       - PORT=8088
volumes:
 postgres_data: