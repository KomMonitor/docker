version: '3.8'

networks:
  kommonitor:
    name: kommonitor
    driver: bridge

services:
  kommonitor-client:
    image: 'kommonitor/web-client'
    container_name: kommonitor-client
    restart: unless-stopped
    volumes:
      - ./client/config-storage-server.json:/usr/share/nginx/html/config/config-storage-server.json # mount config for client-config-service
    ports:
      - 8084:80
    networks:
      - kommonitor

  kommonitor-client-config:
    image: 'kommonitor/client-config'
    container_name: kommonitor-client-config
    restart: unless-stopped
    ports:
      - 8088:8088
    networks:
      - kommonitor
    volumes:
      - ./client_config/webClientAppConfig.js:/code/configStorage/webClientAppConfig.js # mounting existing webClientAppConfig into container to have console access
      - ./client_config/webClientKeycloakConfig.json:/code/configStorage/webClientKeycloakConfig.json # mounting existing webClientKeycloakConfig into container to have console access
      - ./client_config/webClientControlsConfig.json:/code/configStorage/webClientControlsConfig.json # mounting existing webClientControlsConfig into container to have console access
    env_file:
      - client-config.env
      - keycloak.env

  redis:
    image: redis:alpine
    container_name: kommonitor-redis
    restart: unless-stopped
    networks:
      - kommonitor

  kommonitor-processing-engine:
    image: 'kommonitor/processing-engine'
    container_name: kommonitor-processing-engine
    restart: unless-stopped
    ports:
      - "8086:8086"
    networks:
      - kommonitor
    volumes:
      - ./processing_engine:/code/tmp
    depends_on:
      - redis
    env_file:
      - processing-engine.env
      - keycloak.env

  kommonitor-processing-scheduler:
    image: 'kommonitor/processing-scheduler'
    container_name: kommonitor-processing-scheduler
    restart: unless-stopped
    networks:
      - kommonitor
    depends_on:
      - kommonitor-processing-engine
      - kommonitor-data-management
    env_file:
      - processing-scheduler.env
      - keycloak.env

  kommonitor-importer:
    image: 'kommonitor/importer'
    container_name: kommonitor-importer
    restart: unless-stopped
    networks:
      - kommonitor
    ports:
      - 8087:8087
    volumes:
      - ./importer:/tmp/importer
    env_file:
      - importer.env
      - keycloak.env

  kommonitor-db:
    image: postgis/postgis:latest
    container_name: kommonitor-db
    restart: unless-stopped
    networks:
      - kommonitor
    ports:
      - 5432:5432
    volumes:
      - ./database/data:/var/lib/postgresql/data
    env_file:
      - db.env

  kommonitor-data-management:
    image: kommonitor/data-management
    container_name: kommonitor-data-management
    restart: unless-stopped
    depends_on:
      - kommonitor-db
    ports:
      - "8085:8085"
    networks:
      - kommonitor
    links:
      - kommonitor-db
    env_file:
      - data-management.env
      - keycloak.env

  # optional pgadmin container to inspect the database
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    ports:
      - 8083:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@kommonitor.de
      - PGADMIN_DEFAULT_PASSWORD=kommonitor
    # volumes:
    #   - /var/kommonitor/pgadmin/servers.json:/pgadmin4/servers.json
    #   - /var/kommonitor/pgadmin/pgadmin:/var/lib/pgadmin
    networks:
      - kommonitor